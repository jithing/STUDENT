/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package student;

import java.awt.Color;
import static java.lang.Double.isNaN;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.BorderFactory;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.border.Border;

/**
 *
 * @author Dummy
 */
public class Update extends javax.swing.JFrame {

    /**
     * Creates new form Update
     */
    public Update() {
        initComponents();
         ImageIcon X = new ImageIcon (AdminPanel.class.getResource("images/pec.jpg"));
        pec.setIcon(X);
        ImageIcon Y = new ImageIcon (AdminPanel.class.getResource("images/au.png"));
        au.setIcon(Y);
        
        try{
            Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");
            con = DriverManager.getConnection("jdbc:odbc:"+datasource,"","");
        } 
           catch (ClassNotFoundException ex) {
            System.out.println("Class Not Found");
        } catch (SQLException ex) {
            System.out.println("connection not established");
        }
    }
    
    
    public Connection con;
    public Statement s;
    public ResultSet rs;
    public static String datasource;

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel4 = new javax.swing.JLabel();
        au = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        pec = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        regno = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        sem = new javax.swing.JComboBox();
        jLabel5 = new javax.swing.JLabel();
        sub = new javax.swing.JComboBox();
        jLabel6 = new javax.swing.JLabel();
        grade = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        newgrade = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        name = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel4.setText("RESULT MAINTAINENCE PORTAL");

        au.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        au.setMaximumSize(new java.awt.Dimension(64, 64));

        jLabel3.setFont(new java.awt.Font("Cambria", 1, 14)); // NOI18N
        jLabel3.setText("PANIMALAR ENGINEERING COLLEGE");

        pec.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        pec.setMaximumSize(new java.awt.Dimension(64, 64));

        jLabel1.setText("REGISTER NO");

        regno.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        regno.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                regnoFocusLost(evt);
            }
        });

        jLabel2.setText("SEMESTER");

        sem.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "2", "3", "4", "5", "6", "7", "8" }));
        sem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                semActionPerformed(evt);
            }
        });

        jLabel5.setText("SUBJECT");

        sub.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Subject 1" }));
        sub.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                subActionPerformed(evt);
            }
        });
        sub.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                subFocusLost(evt);
            }
        });

        jLabel6.setText("GRADE");

        grade.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel7.setText("NEW GRADE");

        newgrade.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jButton1.setText("UPDATE");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("CANCEL");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel8.setText("NAME");

        name.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(pec, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel5)
                            .addComponent(jLabel6)
                            .addComponent(jLabel7)
                            .addComponent(jLabel1)
                            .addComponent(jLabel8))
                        .addGap(40, 40, 40)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(regno, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(name, javax.swing.GroupLayout.DEFAULT_SIZE, 172, Short.MAX_VALUE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(sem, 0, 111, Short.MAX_VALUE)
                                .addComponent(grade)
                                .addComponent(newgrade))
                            .addComponent(sub, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap(65, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(27, 27, 27)
                                .addComponent(jLabel4)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(au, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18))))
            .addGroup(layout.createSequentialGroup()
                .addGap(145, 145, 145)
                .addComponent(jButton1)
                .addGap(18, 18, 18)
                .addComponent(jButton2)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(au, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel4))
                    .addComponent(pec, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel1)
                    .addComponent(regno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(sem, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(sub, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(grade, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(newgrade, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 48, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addGap(27, 27, 27))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public String semester,query,a;
    
    private void semActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_semActionPerformed
        a = (String)sem.getSelectedItem();
        semester = "SEM"+a;
        sub.removeAllItems();
        try {
            s = con.createStatement();
            query = " select SUBJECT from SUBJECT where SEMESTER = "+a;
            s.execute(query);
            rs = s.getResultSet();
            while(rs.next())
                sub.addItem( rs.getString("SUBJECT"));
        //a = null;
        }
        catch(SQLException e){
            e.printStackTrace();
        }
    }//GEN-LAST:event_semActionPerformed

    public String registerno;
    
    private void regnoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_regnoFocusLost
        try{
        registerno = regno.getText();
        
        query = "select name from SEM1 where REGISTERNO = '" + registerno +"'" ;
        s = con.createStatement();
        s.execute(query);
        rs = s.getResultSet();
       
        if (rs.next()){
            Border border = BorderFactory.createLineBorder(new Color(0,200,0), 2);
            regno.setBorder(border);
            name.setText( rs.getString("name") );
        }
        else {
            JOptionPane.showMessageDialog(null, "REGISTER NO NOT FOUND");
            Border border = BorderFactory.createLineBorder(Color.RED, 2);
            regno.setBorder(border);
            regno.requestFocus();
        }}
        
        catch(SQLException e){ System.out.println(e);}
                                
    }//GEN-LAST:event_regnoFocusLost

    public String subject,code;
    
    private void subActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_subActionPerformed
         /*subject = (String)sub.getSelectedItem();
         query = "SELECT CODE FROM SUBJECT WHERE SUBJECT = '"+subject+"'";
         System.out.println(query);
        try {
        s = con.createStatement();
        s.execute(query);
        rs = s.getResultSet();
        while( rs.next() )
            code = rs.getString("CODE");
        
        query = "select "+code+" from "+semester+" where REGISTERNO = '"+registerno+"'";
        System.out.println(query);
        s = con.createStatement();
        s.execute(query);
        rs = s.getResultSet();
        while( rs.next() )
            grade.setText( rs.getString(code));
        }
        catch( SQLException e ){
            System.out.println(e);
        }*/
    }//GEN-LAST:event_subActionPerformed

    public int credits;
    
    private void subFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_subFocusLost
        subject = (String)sub.getSelectedItem();
         query = "SELECT CODE,CREDITS FROM SUBJECT WHERE SUBJECT = '"+subject+"'";
         System.out.println(query);
        try {
        s = con.createStatement();
        s.execute(query);
        rs = s.getResultSet();
        while( rs.next() )
        { code = rs.getString("CODE");
          credits = rs.getInt("CREDITS");
        }
        
        query = "select "+code+" from "+semester+" where REGISTERNO = '"+registerno+"'";
        System.out.println(query);
        s = con.createStatement();
        s.execute(query);
        rs = s.getResultSet();
        while( rs.next() )
            grade.setText( rs.getString(code));
        newgrade.requestFocus();
        }
        catch( SQLException e ){
            System.out.println(e);
        }
    }//GEN-LAST:event_subFocusLost

    public String newmark,oldmark;
    public int newpoint, oldpoint,oldcredits,newcredits;
    public double gpa, oldgpa, cgpa;
    public double newtotalgp, oldtotalgp;
    public Double p1,p2,p3,p4,p5,p6,p7,q1,q2,q3,q4,q5,q6,q7;
    public int a1,a2,a3,a4,a5,a6,a7;
    public ResultSet qrs;
    
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try{
            
            String aa = (newgrade.getText()).trim(); String bb = (grade.getText()).trim();
            System.out.println(credits);
        if( aa.equals(bb)) {
            JOptionPane.showMessageDialog(null,"OLD AND NEW GRADE ARE SAME");
            return;
        }
        
        if( EnterMarks.validate((newgrade.getText()).trim()) ==0){
            JOptionPane.showMessageDialog(null,"ENTER A VALID GRADE");
            Border border = BorderFactory.createLineBorder(Color.RED, 2);
            newgrade.setBorder(border);
            newgrade.requestFocus();
            return;
        }
        newmark = (newgrade.getText()).trim();
        newpoint = EnterMarks.GradePoint(newmark);
        
        System.out.println("NEWMARK: "+newmark+"\t NEWPOINT: "+newpoint);
        
        //GETTING OLD CREDITSEARNED
        
        query = "select CREDITSEARNED FROM "+semester+" where REGISTERNO = '"+registerno+"'";
        System.out.println(query);
        s = con.createStatement();
        s.execute(query);
        rs = s.getResultSet();
        while(rs.next())
            oldcredits = rs.getInt("CREDITSEARNED");
        
        oldmark = (grade.getText()).trim();
        oldpoint = EnterMarks.GradePoint(oldmark);
        
        System.out.println("OLDCREDITS "+oldcredits);
        
        //UPDATING NEW CREDITSEARNED
        /*
        newcredits = oldcredits - oldpoint + newpoint;
        System.out.println("NEWCREDITS "+newcredits);
        query = "update "+semester+" set CREDITSEARNED = "+newcredits+" where REGISTERNO ='"+registerno+"'";
        s = con.createStatement();
        s.execute(query);
        */
        
        //GETTING NO OF ARREARS
        
        int totalarr=0,currentarr=0;
        
        query = "select TOTALARR,CURRENTARR from "+semester+" where REGISTERNO = '"+registerno+"'";
        s = con.createStatement();
        
        s.execute(query);
        rs = s.getResultSet();
        while( rs.next()){
            totalarr = rs.getInt("TOTALARR");
            currentarr = rs.getInt("CURRENTARR");
        }
        System.out.println("OLD ARREARS "+currentarr+"\t"+totalarr);
        
        //UPDATING NO OF ARREARS
         
        if(oldmark.equals("U")){
            if(!newmark.equals("U")){
                totalarr-- ; 
                currentarr--;
                newcredits = oldcredits + credits;
            }
        }
        else
            newcredits = oldcredits;
        
        System.out.println("NEW ARREARS "+currentarr+"\t"+totalarr);
        
        
        System.out.println("OLDCREDITS "+oldcredits+"\tNEWCREDITS "+newcredits);
        
        query = "update "+semester+" set TOTALARR ="+totalarr+", CURRENTARR="+currentarr+" where REGISTERNO='"+registerno+"'";
        s = con.createStatement();
        s.execute(query);
        
        //GETTING OLD GPA
        
        query = " select GPA from "+semester+" where REGISTERNO = '"+registerno+"'";
        s = con.createStatement();
        s.execute(query);
        rs = s.getResultSet();
        while(rs.next())
            oldgpa = rs.getDouble("GPA");
        System.out.println("OLDGPA "+oldgpa);
        oldtotalgp = oldgpa * oldcredits;
        
        //UPDATING NEW GPA
        
        System.out.println( "oldtotalgp = "+ oldgpa + "*" + oldcredits + " = " + oldtotalgp);
        newtotalgp = oldtotalgp - (oldpoint*credits ) + (newpoint*credits);
        System.out.println(" newtotalgp = "+ oldtotalgp +" - ( "+ oldpoint +"*"+credits+" ) + ( "+newpoint+"*"+credits+" ) = "+newtotalgp);
        
        gpa = newtotalgp / (double) newcredits;
        if(isNaN(gpa)) gpa=0;
         System.out.println("NEWGPA "+gpa);
         
        query = "update "+semester+" set GPA="+gpa+" where REGISTERNO='"+registerno+"'";
        s = con.createStatement();
        s.execute(query);
        con.commit();
        
        
        //UPDATING CGPA
        
        if(semester.equals("SEM1")){
            cgpa = gpa;
        }
        
        if(semester.equals("SEM2")){
            query = "SELECT GPA, CREDITSEARNED, TOTALARR FROM SEM1 WHERE REGISTERNO = '"+registerno+"'";
                
                s.execute(query);
                
                qrs = s.getResultSet();
                while(qrs.next()){
                    p1 = qrs.getDouble("GPA"); q1 = qrs.getDouble("CREDITSEARNED"); a1 = qrs.getInt("TOTALARR");
                }
                
                System.out.println("\n\n GPA: "+p1);
                
                cgpa = ((p1*q1)+(gpa*newcredits)) / (double) (newcredits+q1);
        }
        
        if(semester.equals("SEM3")){
            query = "SELECT GPA, CREDITSEARNED, TOTALARR FROM SEM1 WHERE REGISTERNO = '"+registerno+"'";
                
                s.execute(query);
                
                qrs = s.getResultSet();
                while(qrs.next()){
                    p1 = qrs.getDouble("GPA"); q1 = qrs.getDouble("CREDITSEARNED"); a1 = qrs.getInt("TOTALARR") ;  
                }
                
                query = "SELECT GPA, CREDITSEARNED, TOTALARR FROM SEM2 WHERE REGISTERNO = '"+registerno+"'";
                
                s.execute(query);
                
                qrs = s.getResultSet();
                while(qrs.next()){
                    p2 = qrs.getDouble("GPA"); q2 = qrs.getDouble("CREDITSEARNED"); a2 = qrs.getInt("TOTALARR") ;
                }
                
                cgpa = ((p1*q1) + (p2*q2) + (gpa*newcredits)) / (double) (newcredits+q1+q2);
        }
        
        if(semester.equals("SEM4")){
            //SEMESTER 1 
                
                query = "SELECT GPA, CREDITSEARNED, TOTALARR FROM SEM1 WHERE REGISTERNO = '"+registerno+"'";
                
                s.execute(query);
                
                qrs = s.getResultSet();
                while(qrs.next()){
                    p1 = qrs.getDouble("GPA"); q1 = qrs.getDouble("CREDITSEARNED"); a1 = qrs.getInt("TOTALARR") ;  
                }
                
                //SEMESTER 2
                
                query = "SELECT GPA, CREDITSEARNED, TOTALARR FROM SEM2 WHERE REGISTERNO = '"+registerno+"'";
                
                s.execute(query);
                
                qrs = s.getResultSet();
                while(qrs.next()){
                    p2 = qrs.getDouble("GPA"); q2 = qrs.getDouble("CREDITSEARNED"); a2 = qrs.getInt("TOTALARR") ;
                }
                
                //SEMESTER 3
                
                query = "SELECT GPA, CREDITSEARNED, TOTALARR FROM SEM3 WHERE REGISTERNO = '"+registerno+"'";
                
                s.execute(query);
                
                qrs = s.getResultSet();
                while(qrs.next()){
                    p3 = qrs.getDouble("GPA"); q3 = qrs.getDouble("CREDITSEARNED"); a3 = qrs.getInt("TOTALARR") ;  
                }
                
                cgpa = ((p1*q1) + (p2*q2) + (p3*q3)+ (gpa*newcredits)) / (double) (newcredits+q1+q2+q3);
                 if( isNaN(cgpa)) cgpa=0;
        }
        
        if(semester.equals("SEM5")){
            //SEMESTER 1 
                
                query = "SELECT GPA, CREDITSEARNED, TOTALARR FROM SEM1 WHERE REGISTERNO = '"+registerno+"'";
                
                s.execute(query);
                
                qrs = s.getResultSet();
                while(qrs.next()){
                    p1 = qrs.getDouble("GPA"); q1 = qrs.getDouble("CREDITSEARNED"); a1 = qrs.getInt("TOTALARR") ;  
                }
                
                //SEMESTER 2
                
                query = "SELECT GPA, CREDITSEARNED, TOTALARR FROM SEM2 WHERE REGISTERNO = '"+registerno+"'";
                
                s.execute(query);
                
                qrs = s.getResultSet();
                while(qrs.next()){
                    p2 = qrs.getDouble("GPA"); q2 = qrs.getDouble("CREDITSEARNED"); a2 = qrs.getInt("TOTALARR") ;
                }
                
                //SEMESTER 3
                
                query = "SELECT GPA, CREDITSEARNED, TOTALARR FROM SEM3 WHERE REGISTERNO = '"+registerno+"'";
                
                s.execute(query);
                
                qrs = s.getResultSet();
                while(qrs.next()){
                    p3 = qrs.getDouble("GPA"); q3 = qrs.getDouble("CREDITSEARNED"); a3 = qrs.getInt("TOTALARR") ;  
                }
                
                //SEMESTER 4 
                
                query = "SELECT GPA, CREDITSEARNED, TOTALARR FROM SEM4 WHERE REGISTERNO = '"+registerno+"'";
                
                s.execute(query);
                
                qrs = s.getResultSet();
                while(qrs.next()){
                    p4 = qrs.getDouble("GPA"); q4 = qrs.getDouble("CREDITSEARNED"); a4 = qrs.getInt("TOTALARR") ;  
                }
                
                
                cgpa = ((p1*q1) + (p2*q2) + (p3*q3)+ (p4*q4) + (gpa*newcredits)) / (double) (newcredits+q1+q2+q3+q4);
                 if( isNaN(cgpa)) cgpa=0;
        }
        
        if(semester.equals("SEM6")){
            //SEMESTER 1 
                
                query = "SELECT GPA, CREDITSEARNED, TOTALARR FROM SEM1 WHERE REGISTERNO = '"+registerno+"'";
                
                s.execute(query);
                
                qrs = s.getResultSet();
                while(qrs.next()){
                    p1 = qrs.getDouble("GPA"); q1 = qrs.getDouble("CREDITSEARNED"); a1 = qrs.getInt("TOTALARR") ;  
                }
                
                //SEMESTER 2
                
                query = "SELECT GPA, CREDITSEARNED, TOTALARR FROM SEM2 WHERE REGISTERNO = '"+registerno+"'";
                
                s.execute(query);
                
                qrs = s.getResultSet();
                while(qrs.next()){
                    p2 = qrs.getDouble("GPA"); q2 = qrs.getDouble("CREDITSEARNED"); a2 = qrs.getInt("TOTALARR") ;
                }
                
                //SEMESTER 3
                
                query = "SELECT GPA, CREDITSEARNED, TOTALARR FROM SEM3 WHERE REGISTERNO = '"+registerno+"'";
                
                s.execute(query);
                
                qrs = s.getResultSet();
                while(qrs.next()){
                    p3 = qrs.getDouble("GPA"); q3 = qrs.getDouble("CREDITSEARNED"); a3 = qrs.getInt("TOTALARR") ;  
                }
                
                //SEMESTER 4 
                
                query = "SELECT GPA, CREDITSEARNED, TOTALARR FROM SEM4 WHERE REGISTERNO = '"+registerno+"'";
                
                s.execute(query);
                
                qrs = s.getResultSet();
                while(qrs.next()){
                    p4 = qrs.getDouble("GPA"); q4 = qrs.getDouble("CREDITSEARNED"); a4 = qrs.getInt("TOTALARR") ;  
                }
                
                //SEMESTER 5 
                
                query = "SELECT GPA, CREDITSEARNED, TOTALARR FROM SEM5 WHERE REGISTERNO = '"+registerno+"'";
                
                s.execute(query);
                
                qrs = s.getResultSet();
                while(qrs.next()){
                    p5 = qrs.getDouble("GPA"); q5 = qrs.getDouble("CREDITSEARNED"); a5 = qrs.getInt("TOTALARR") ;  
                }
                
                
                cgpa = ((p1*q1) + (p2*q2) + (p3*q3)+ (p4*q4) + (p5*q5) +(gpa*newcredits)) / (double) (newcredits+q1+q2+q3+q4+q5);
                 if( isNaN(cgpa)) cgpa=0;
        }
        
        if (semester.equals("SEM7")){
             //SEMESTER 1 
                
                query = "SELECT GPA, CREDITSEARNED, TOTALARR FROM SEM1 WHERE REGISTERNO = '"+registerno+"'";
                
                s.execute(query);
                
                qrs = s.getResultSet();
                while(qrs.next()){
                    p1 = qrs.getDouble("GPA"); q1 = qrs.getDouble("CREDITSEARNED"); a1 = qrs.getInt("TOTALARR") ;  
                }
                
                //SEMESTER 2
                
                query = "SELECT GPA, CREDITSEARNED, TOTALARR FROM SEM2 WHERE REGISTERNO = '"+registerno+"'";
                
                s.execute(query);
                
                qrs = s.getResultSet();
                while(qrs.next()){
                    p2 = qrs.getDouble("GPA"); q2 = qrs.getDouble("CREDITSEARNED"); a2 = qrs.getInt("TOTALARR") ;
                }
                
                //SEMESTER 3
                
                query = "SELECT GPA, CREDITSEARNED, TOTALARR FROM SEM3 WHERE REGISTERNO = '"+registerno+"'";
                
                s.execute(query);
                
                qrs = s.getResultSet();
                while(qrs.next()){
                    p3 = qrs.getDouble("GPA"); q3 = qrs.getDouble("CREDITSEARNED"); a3 = qrs.getInt("TOTALARR") ;  
                }
                
                //SEMESTER 4 
                
                query = "SELECT GPA, CREDITSEARNED, TOTALARR FROM SEM4 WHERE REGISTERNO = '"+registerno+"'";
                
                s.execute(query);
                
                qrs = s.getResultSet();
                while(qrs.next()){
                    p4 = qrs.getDouble("GPA"); q4 = qrs.getDouble("CREDITSEARNED"); a4 = qrs.getInt("TOTALARR") ;  
                }
                
                //SEMESTER 5 
                
                query = "SELECT GPA, CREDITSEARNED, TOTALARR FROM SEM5 WHERE REGISTERNO = '"+registerno+"'";
                
                s.execute(query);
                
                qrs = s.getResultSet();
                while(qrs.next()){
                    p5 = qrs.getDouble("GPA"); q5 = qrs.getDouble("CREDITSEARNED"); a5 = qrs.getInt("TOTALARR") ;  
                }
                
                //SEMESTER 6 
                
                query = "SELECT GPA, CREDITSEARNED, TOTALARR FROM SEM6 WHERE REGISTERNO = '"+registerno+"'";
                
                s.execute(query);
                
                qrs = s.getResultSet();
                while(qrs.next()){
                    p6 = qrs.getDouble("GPA"); q6 = qrs.getDouble("CREDITSEARNED"); a6 = qrs.getInt("TOTALARR") ;  
                }
                
                
                cgpa = ((p1*q1) + (p2*q2) + (p3*q3)+ (p4*q4) + (p5*q5) + (p6*q6) + (gpa*newcredits)) / (double) (newcredits+q1+q2+q3+q4+q5+q6);
                 if( isNaN(cgpa)) cgpa=0;
        }
        
        if(semester.equals("SEM8")){
              //SEMESTER 1 
                
                query = "SELECT GPA, CREDITSEARNED, TOTALARR FROM SEM1 WHERE REGISTERNO = '"+registerno+"'";
                
                s.execute(query);
                
                qrs = s.getResultSet();
                while(qrs.next()){
                    p1 = qrs.getDouble("GPA"); q1 = qrs.getDouble("CREDITSEARNED"); a1 = qrs.getInt("TOTALARR") ;  
                }
                
                //SEMESTER 2
                
                query = "SELECT GPA, CREDITSEARNED, TOTALARR FROM SEM2 WHERE REGISTERNO = '"+registerno+"'";
                
                s.execute(query);
                
                qrs = s.getResultSet();
                while(qrs.next()){
                    p2 = qrs.getDouble("GPA"); q2 = qrs.getDouble("CREDITSEARNED"); a2 = qrs.getInt("TOTALARR") ;
                }
                
                //SEMESTER 3
                
                query = "SELECT GPA, CREDITSEARNED, TOTALARR FROM SEM3 WHERE REGISTERNO = '"+registerno+"'";
                
                s.execute(query);
                
                qrs = s.getResultSet();
                while(qrs.next()){
                    p3 = qrs.getDouble("GPA"); q3 = qrs.getDouble("CREDITSEARNED"); a3 = qrs.getInt("TOTALARR") ;  
                }
                
                //SEMESTER 4 
                
                query = "SELECT GPA, CREDITSEARNED, TOTALARR FROM SEM4 WHERE REGISTERNO = '"+registerno+"'";
                
                s.execute(query);
                
                qrs = s.getResultSet();
                while(qrs.next()){
                    p4 = qrs.getDouble("GPA"); q4 = qrs.getDouble("CREDITSEARNED"); a4 = qrs.getInt("TOTALARR") ;  
                }
                
                //SEMESTER 5 
                
                query = "SELECT GPA, CREDITSEARNED, TOTALARR FROM SEM5 WHERE REGISTERNO = '"+registerno+"'";
                
                s.execute(query);
                
                qrs = s.getResultSet();
                while(qrs.next()){
                    p5 = qrs.getDouble("GPA"); q5 = qrs.getDouble("CREDITSEARNED"); a5 = qrs.getInt("TOTALARR") ;  
                }
                
                //SEMESTER 6 
                
                query = "SELECT GPA, CREDITSEARNED, TOTALARR FROM SEM6 WHERE REGISTERNO = '"+registerno+"'";
                
                s.execute(query);
                
                qrs = s.getResultSet();
                while(qrs.next()){
                    p6 = qrs.getDouble("GPA"); q6 = qrs.getDouble("CREDITSEARNED"); a6 = qrs.getInt("TOTALARR") ;  
                }
                
                //SEMESTER 7 
                
                query = "SELECT GPA, CREDITSEARNED, TOTALARR FROM SEM7 WHERE REGISTERNO = '"+registerno+"'";
                
                s.execute(query);
                
                qrs = s.getResultSet();
                while(qrs.next()){
                    p7 = qrs.getDouble("GPA"); q7 = qrs.getDouble("CREDITSEARNED"); a7 = qrs.getInt("TOTALARR") ;  
                }
                
                
                cgpa = ((p1*q1) + (p2*q2) + (p3*q3)+ (p4*q4) + (p5*q5) + (p6*q6) + (p7*q7) + (gpa*newcredits)) / (double) (newcredits+q1+q2+q3+q4+q5+q6+q7);
                 if( isNaN(cgpa)) cgpa=0;
        }
                
        query = "update "+semester+" set "+code+" = '"+newmark+" ' where REGISTERNO ='"+registerno+"'";
        s.execute(query);
        con.commit();
        JOptionPane.showMessageDialog(null, "UPDATION SUCCESSFUL\n\nGPA = "+String.format( "%.3f", Double.parseDouble( String.valueOf(gpa) ) )+" \nCGPA = "+String.format( "%.3f", Double.parseDouble( String.valueOf(cgpa) ) ));
        
        
        }
        catch(SQLException e){
            e.printStackTrace();
        }
        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        this.setVisible(false);
        AdminPanel a = new AdminPanel();
        a.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Update.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Update.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Update.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Update.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Update().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel au;
    private javax.swing.JTextField grade;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JTextField name;
    private javax.swing.JTextField newgrade;
    private javax.swing.JLabel pec;
    private javax.swing.JTextField regno;
    private javax.swing.JComboBox sem;
    private javax.swing.JComboBox sub;
    // End of variables declaration//GEN-END:variables
}
